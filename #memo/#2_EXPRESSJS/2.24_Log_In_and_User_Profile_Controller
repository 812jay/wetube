🔴Login을 작업해보자!

🔴login도 get, post 나누자
userController에서 나누어보쟈.

🔴login에 성공하면 routes.home으로 redirect 하쟈. join 흐름과 같음.

🔴userController에 postJoin에서 일단 home으로 가게 
-----------------------------------------------------
res.redirect(routes.home);
-----------------------------------------------------
해주자.

🔴globalRouter에서 이전의 login을 getLogin으로 바꾸고
postLogin 추가한다음 import에서도 수정해주자.
-----------------------------------------------------
globalRouter.get(routes.login, getLogin);
globalRouter.post(routes.login, postLogin);
-----------------------------------------------------

🔴공개페이지에 대한 작업은 다 된거같음. header.pug에서 navigation을 좀 수정해보자.

🔴로그인 됐을때와 안됐을때의 화면을 만들자.

----------------------------------------------------
    .header__column
    ul
        li
            a(href=routes.join) Join
        li
            a(href=routes.login) Log In
------------------------->>>>-----------------------
    .header__column
        ul
            if !user.isAuthenticated
                li
                    a(href=routes.join) Join
                li
                    a(href=routes.login) Log In
            else 
                li
                     a(href=routes.upload) Upload
                li
                     a(href=routes.userDetail) Profile
                li
                     a(href=routes.logout) Logout    
---------------------------------------------------- 


🔴header.pug에 user는 아직 존재하지 않는 변수이기 때문에
가짜로 한번 만들어보자. 로그인이 되었는지 알려주는 변수임.
middleware.js에서 res.locals.user에 isAuthenticated: true가 
담긴객체를 입력하자.
---------------------------------------------------- 
  res.locals.user = {
    isAuthenticated: true,
    id: 1
  }
---------------------------------------------------- 

🔴그 후 브라우저 header 화면에 upload, Profile, logout 뜨는지 확인.

🔴문제점이 하나 있음. Profile링크를 누르면 "/:id" 주소로 이동함
미들웨어에 설정된 id가 url에 들어가도록 하기 위해 route를 수정하자.
ex) "/:id" -> "/5" 

🔴routes.js에 const routes 안에 userDetail값을 함수로 수정하자.
---------------------------------------------------- 
  userDetail: (id) => {
    if (id) {
      return `/users/${id}`;
    } else {
      return USER_DETAIL;
    }
  },
---------------------------------------------------- 

🔴선언만하고 실행안하면 안되니까 userRouter.js도 수정하자
---------------------------------------------------- 
userRouter.get(routes.userDetail, userDetail);
------------------>>>>>>>>------------------------- 
userRouter.get(routes.userDetail(), userDetail);
---------------------------------------------------- 

그리고 template을 인자없이 실행하면 안되니까 header.pug에서
---------------------------------------------------- 
a(href=routes.userDetail) Profile
--------------------->>>>>>------------------------- 
a(href=routes.userDetail(user.id)) Profile
---------------------------------------------------- 
로 수정하고 
브라우저에서 Profile눌러보면 "User Detail" 이라는 text가 뜰거임.

🔴videoDetail도 똑같이 작업해보자.

🔴가짜데이터를 만들어놓고 test작업하면 나중에 실제데이터가 있을때
빠르게 작업 할 수있음. db부분만 추가하면 되기 때문에.
