🔴.env에 설정한걸 db.js에서 사용했던것처럼 webpack을 수동으로 설정해보자.

🔴윈도우 환경은 cross-env 설치해보자.
npm install cross-env

🔴npm install시
npm install cross-env : dependencies,
npm install --save-dev cross-env : devDependencies
에 저장된다.(package.json)
devDependencies로 들어갈 경우,
나중에 heroku가 WEBPACK_ENV를 인식 못하기때문에 dependencies로 설치하자.

🔴package.json에 script수정

------------------------package.json------------------------------
  "scripts": {
    "dev:server": "nodemon --exec babel-node init.js --delay 2",
    "dev:assets": "webpack"
  },
------------------------>>>>>>>>>>>>>-----------------------------
  "scripts": {
    "dev:server": "nodemon --exec babel-node init.js --delay 2",
    "dev:assets": "cross-env WEBPACK_ENV=development webpack",
    "build:assets": "cross-env WEBPACK_ENV=production webpack"
  },
------------------------------------------------------------------

🔴위의 설정 파일을 사용하도록 webpack.config.js도 수정.
------------------------------------------------------------------
const MODE = process.env.WEBPACK_ENV;
const ENTRY_FILE = path.resolve(__dirname, "assets", "js", "main.js");
const OUTPUT_DIR = path.join(__dirname, "static");

const config = {
  entry: ENTRY_FILE,
  mode: MODE,
  output: {
    path: OUTPUT_DIR,
    filename: "[name].[format]",
  },
};
------------------------------------------------------------------

🔴npm run dev:assets 실행해보면 실패했다고 떠있는데 이건 webpack이 CSS부분을
이해하지 못해서임.
그러므로 webpack에 rule을 주자.


🔴npm install extra-text-webpack-plugin@next
: extra-text-webpack-plugin 다음버전을 설치하자.

🔴loader
: webpack에게 파일을 처리하는 방법을 알려줌.
loader는 아래에서 위로 진행한다.

🔴webpack.config.js의 config에서 처리규칙을 입력해주자.
