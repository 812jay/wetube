⭕postJoin에 middleware를 추가하자.

⭕postJoin에 redirect는 더이상 사용하지 않을거임.
왜냐하면 바로 로그인 시켜주기 위함.

⭕postJoin에서 받은 username(email), password 정보를
postLogin으로 보낸다.
-------------------globalRouter.js-----------------------
globalRouter.post(routes.join, postJoin, postLogin);
---------------------------------------------------------

⭕
-----------------userController.js-----------------------
export const postLogin = (req, res) => {
  res.redirect(routes.home);
};
----------------------->>>>>-----------------------------
export const postLogin = passport.authenticate("local", {
  failureRedirect: routes.login,
  successRedirect: routes.home,
});
---------------------------------------------------------

⭕
passport가 사용자를 로그인시킬때 serialize, deserialize, 
user가 담긴 object를 요청(request)에도 올려줄 것 이므로 
아래와 같이 수정하자.
이렇게 작성해야 우리 template들이 이 user에 접근 가능하게
할 수 있다.
-----------------middleware.js-----------------------
...
  res.locals.user = {
    isAuthenticated: false,
    id: 1,
  };
...
----------------------->>>>>-----------------------------
...
  res.locals.user = req.user || {};
...
---------------------------------------------------------

⭕테스트해보기전에 app.js로 가서 이 passport를 import하고 
use해야한다.
----------------------app.js----------------------------
....
app.use(cookieParser());
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: true }));
app.use(morgan("dev"));
app.use(passport.initialize());
app.use(passport.session()); <-추가

app.use(localsMiddleware); <-추가
....
---------------------------------------------------------
저 위치에 써준 이유는 위에서 실행된 cookieparser로 부터 쿠키가
쭉 내려와서 initialize되고 그 다음엔 passport가 제 스스로
쿠키를 들여다 봐서, 그 쿠키 정보에 해당하는 사용자를 찾아줄거임.
그리고 passport는 자기가 찾은 그 사용자를 요청(request)의 
object(req.user)로 만들어줌.
그러면 그 user object를 template에 추가시켜 줄 수 있음.

⭕app.js에서 passport.js import
---------------------app.js------------------------------
import "./passport";
---------------------------------------------------------

⭕join하고나면 session에 정보 들어와야되는데 안들어오네?
express-session 설치하자.

⭕express-session
session을 관리해 주기 위해 필요

⭕로그인 성공하면 home화면으로 가면 실패하면 login화면에 그대로
있어야 한다. 테스트해보자.
