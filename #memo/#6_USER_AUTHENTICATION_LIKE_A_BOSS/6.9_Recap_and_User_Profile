⭕authentication정리해보자.

⭕
username과 password를 이용한 방식(local방식) : 
username과 password를 post방식으로 전달하고 mongoose가 자동으로 체크해줌.
password가 맞으면 맞다고 알리고 cookie생성.

⭕
github 인증 : 
github website(auth) -> /auth/github/callback -> githubLoginCallback(profile)
=>cb(error)

cookie = makeCookie(user)
savedCookie = saveCookie(cookie)
sendCookie(savedCookie)

⭕githubLoginCallback의 조건은 callback(cb) 함수를 return 해야함.

⭕error가 존재하면 passport는 "error가 있으니 user는 없구나" 하고 끝내버리고,
user가 존재하면, user를 취해서 cookie생성하고 cookie를 저장한다.

⭕globalRouter를 보면 github로 갈때 githubLogin 이 실행되는데, 우리를
github website로 보내주는 역할을 한다.
그리고 githubCallback(URL) 로 돌아왔을때 passport는 githubLoginCallback을 
실행시킴.

⭕만약 user를 찾으면 passport는 OK 통과시키면서 postGithubLogin이 실행될 것이고
(home으로 redirect) cookie를 저장시킴.
만약 user를 못찾으면 passport는 /login화면으로 redirect시킴.

⭕
camelCase로 바꿔주자.
-------------------userController.js-----------------------
  const {
    _json: { id, avartar_url, name, email },
  } = profile;

  
    const newUser = await User.create({
        ...
      avartar_url,
------------------------->>>>>-----------------------------
  const {
    _json: { id, avartar_url: avartarUrl, name, email },
  } = profile;

  
    const newUser = await User.create({
        ...
      avartarUrl,
-----------------------------------------------------------

⭕profile페이지 만들자. 우선은 userDetail.pug 수정가보자.

⭕
---------------------userController.js------------------------------
export const me = (req, res) => {
  res.render("userDetail", { pageTitle: "User Detail", user: req.user });
};
-----------------------------------------------------------------

⭕userDetail에서는 사용자를 찾는 과정이 필요한데
me에서는 user를 req.user로 전달할거다.
req.user는 현재 로그인된 사용자.


⭕
-----------------userDetail.pug--------------------

    .user-profile
        .user-profile__header
            img.avartar(src=user.avartarUrl)
            h4.profile__username=user.name
---------------------------------------------------

⭕
-----------------header.pug-------------------------
    a(href=routes.userDetail(user.id)) Profile
------------------->>>>>>---------------------------
    a(href=routes.me) Profile
----------------------------------------------------
                    
⭕
---------------routes.js-----------------
  deleteVideo: (id) => {
      .....
  me: ME,
-----------------------------------------

⭕
-----------------middleware.js-------------------
  res.locals.user = req.user || null;
  
  res.locals.loggedUser = req.user || null;
-------------------------------------------------

⭕
-----------header.pug-----------
        if !user
-------------->>>>--------------
        if !loggedUser
--------------------------------

⭕
--------------------globalRouter.js---------------
....
  getMe,
} from "../controllers/userController";
....
globalRouter.get(routes.me, getMe);
--------------------------------------------------

⭕전엔 user라는 변수가 controller로 전달받은것인지, 
아니면 middleware로 인한것인지 구분이 안됐지만 해결.